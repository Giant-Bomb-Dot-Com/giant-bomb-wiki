<?php
# This file was automatically generated by the MediaWiki 1.43.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

$wikiEnv = getenv('MV_ENV') ?: ($_ENV['MV_ENV'] ?? 'dev');

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "gb";
$wgMetaNamespace = "Gb";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost:8080";

# SMW config file directory
$smwgConfigFileDir = getenv('SMW_CONFIG_DIR') ?: '/var/www/html/images/smw-config';

# Load SMW upgrade key from the persisted setup file when available
# This ensures the running service uses the same upgrade key that
# `setupStore.php` wrote to the shared GCS location.
$smwSetupInfoFile = rtrim( $smwgConfigFileDir, '/' ) . '/.smw.json';
if ( is_readable( $smwSetupInfoFile ) ) {
    $smwSetupInfo = json_decode( @file_get_contents( $smwSetupInfoFile ), true );
    if ( is_array( $smwSetupInfo ) && isset( $smwSetupInfo['upgrade_key'] ) && $smwSetupInfo['upgrade_key'] ) {
        $smwgUpgradeKey = $smwSetupInfo['upgrade_key'];
    }
}

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

# Env-driven base origin/path for reverse-proxy hosting under a subpath
$appBaseOrigin = getenv('APP_BASE_ORIGIN');
$appBasePath = getenv('APP_BASE_PATH');
if ( $appBaseOrigin ) {
    $wgServer = $appBaseOrigin;
}
if ( $appBasePath !== false && $appBasePath !== null && $appBasePath !== '' ) {
    $wgScriptPath = $appBasePath;
    $wgResourceBasePath = $wgScriptPath;
}

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
	'icon' => "$wgResourceBasePath/resources/assets/change-your-logo.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = false;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "";
$wgPasswordSender = "";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "db";
$wgDBname = getenv("MARIADB_DATABASE");
$wgDBuser = getenv("MARIADB_USER");
$wgDBpassword = getenv("MARIADB_PASSWORD");

# Cloud SQL connector (Unix socket) support via env CLOUDSQL_INSTANCE
$cloudSqlInstance = getenv('CLOUDSQL_INSTANCE');
if ( $cloudSqlInstance ) {
    # Use Cloud SQL Unix socket. mysqli/PDO accept host:socket form.
    $socketPath = '/cloudsql/' . $cloudSqlInstance;
    $wgDBserver = 'localhost:' . $socketPath;
    $wgDBsocket = $socketPath;
}

# Always allow DB env overrides (useful for socket-based connections)
$dbNameEnvUnconditional = getenv('DB_NAME');
if ( $dbNameEnvUnconditional ) {
    $wgDBname = $dbNameEnvUnconditional;
}
$dbUserEnvUnconditional = getenv('DB_USER');
if ( $dbUserEnvUnconditional ) {
    $wgDBuser = $dbUserEnvUnconditional;
}
$dbPasswordEnvUnconditional = getenv('DB_PASSWORD');
if ( $dbPasswordEnvUnconditional ) {
    $wgDBpassword = $dbPasswordEnvUnconditional;
}

# Final guard to ensure database name is a non-empty string
if ( !is_string( $wgDBname ) || trim( (string)$wgDBname ) === '' ) {
    $fallbackDbName = getenv('DB_NAME');
    if ( is_string( $fallbackDbName ) && trim( $fallbackDbName ) !== '' ) {
        $wgDBname = $fallbackDbName;
    } else {
        # Last-resort default to avoid empty string (MediaWiki requires non-empty or null)
        $wgDBname = 'mediawiki';
    }
}

# Optional DB overrides for Cloud SQL / external DB via env
$dbHost = getenv('DB_HOST');
if ( $dbHost ) {
    $wgDBserver = $dbHost;
    $dbPortEnv = getenv('DB_PORT');
    if ( $dbPortEnv ) {
        $wgDBport = intval($dbPortEnv);
    }
    $dbNameEnv = getenv('DB_NAME');
    if ( $dbNameEnv ) {
        $wgDBname = $dbNameEnv;
    }
    $dbUserEnv = getenv('DB_USER');
    if ( $dbUserEnv ) {
        $wgDBuser = $dbUserEnv;
    }
    $dbPasswordEnv = getenv('DB_PASSWORD');
    if ( $dbPasswordEnv ) {
        $wgDBpassword = $dbPasswordEnv;
    }
}

## Database settings for gb_api_dump
$wgExternalDataSources['gb_api_dump'] = [ 
    'server' => 'db',
    'type' => 'mysql',
    'name' => getenv("MARIADB_API_DUMP_DATABASE"),
    'user' => getenv("MARIADB_USER"),
    'password' => getenv("MARIADB_PASSWORD")
];

$wgExternalDatabases['external_db'] = [ 
    'class' => 'DatabaseLoadBalancer', 
    'hosts' => [ 
        [ 
            'type' => 'mysql',
            'host' => getenv( 'EXTERNAL_DB_HOST' ), 
            'dbname' => getenv( 'EXTERNAL_DB_NAME' ),
            'user' => getenv( 'EXTERNAL_DB_USER' ),
            'password' => getenv( 'EXTERNAL_DB_PASSWORD' ) 
        ] 
    ] 
];


# MySQL specific settings
$wgDBprefix = "";
$wgDBssl = false;

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

if ($wikiEnv == 'prod') {
    # Mounted gcs bucket for images
    $uploadsSubdir = getenv('UPLOADS_SUBDIR');
    if ( $uploadsSubdir ) {
        $wgUploadDirectory = '/var/www/html/images/' . trim($uploadsSubdir, "/");
        $wgUploadPath = $wgScriptPath . '/images/' . trim($uploadsSubdir, "/");
    } else {
        $wgUploadDirectory = '/var/www/html/images';
        $wgUploadPath = $wgScriptPath.'/images';
    }
}

# Allow external images
$wgAddImgTagWhitelist = true;
$wgAddImgTagWhitelistDomainsList = ['www.giantbomb.com'];

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "en";

# Time zone
$wgLocaltimezone = "UTC";

# Cookie scope configuration (env-driven)
$cookieDomain = getenv('COOKIE_DOMAIN');
if ( $cookieDomain ) {
    $wgCookieDomain = $cookieDomain;
}
$cookiePath = getenv('COOKIE_PATH');
if ( !$cookiePath ) {
    $cookiePath = '/';
}
$wgCookiePath = $cookiePath;
if ( $wikiEnv === 'prod' ) {
    $wgCookieSecure = true;
}

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = getenv('MW_SK');

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "9a723b8d53215f97";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://creativecommons.org/licenses/by-nc-sa/4.0/";
$wgRightsText = "Creative Commons Attribution-NonCommercial-ShareAlike";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by-nc-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions["*"]["edit"] = false;

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "giantbomb";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'GiantBomb' );
wfLoadSkin( 'Vector' );


# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtension( 'ExtensionName' );
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:
wfLoadExtension( 'CodeEditor' );
wfLoadExtension( 'PageImages' );
wfLoadExtension( 'ParserFunctions' );
wfLoadExtension( 'Popups' );
wfLoadExtension( 'Scribunto' );
wfLoadExtension( 'SemanticExtraSpecialProperties' );
wfLoadExtension( 'SemanticMediaWiki' );
wfLoadExtension( 'SemanticResultFormats' );
wfLoadExtension( 'SemanticScribunto' );
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'TemplateStyles' );
wfLoadExtension( 'TemplateStylesExtender' );
wfLoadExtension( 'TextExtracts' );
wfLoadExtension( 'WikiEditor' );


# End of automatically generated settings.
# Add more configuration options below.

wfLoadExtension( 'DisplayTitle' );
wfLoadExtension( 'PageForms' );
enableSemantics();

$wgPFEnableStringFunctions = true;
$wgPopupsHideOptInOnPreferencesPage = true;
$wgPopupsReferencePreviewsBetaFeature = false;
$wgPageFormsUseDisplayTitle = false;

# Turn on subpages
$wgNamespacesWithSubpages[NS_MAIN] = true;
$wgNamespacesWithSubpages[NS_TEMPLATE] = true;

# Allows the use of DISPLAYTITLE magic keyword
$wgAllowDisplayTitle = true;
$wgRestrictDisplayTitle = false;

# Remove before prod push
$wgShowExceptionDetails = true;
$wgDevelopmentWarnings = true;
error_reporting( -1 );
ini_set( 'display_errors', 1 );